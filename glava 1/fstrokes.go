package main

import (
	"fmt"
	"math"
)

//%t: для вывода значений типа boolean (true или false)
//%b: для вывода целых чисел в двоичной системе
//%c: для вывода символов, представленных числовым кодом
//%d: для вывода целых чисел в десятичной системе
//%o: для вывода целых чисел в восьмеричной системе
//%q: для вывода символов в одинарных кавычках
//%x: для вывода целых чисел в шестнадцатеричной системе, буквенные символы числа имеют нижний регистр a-f
//%X: для вывода целых чисел в шестнадцатеричной системе, буквенные символы числа имеют верхний регистр A-F
//%U: для вывода символов в формате кодов Unicode, например, U+1234
//%e: для вывода чисел с плавающей точкой в экспоненциальном представлении, например, -1.234456e+78
//%E: тоже самое что %e но в верхнем регистре, например, -1.234456E+78
//%f: для вывода чисел с плавающей точкой, например, 123.456
//%F: то же самое, что и %f
//%g   %e для огромных экспонент, %f в противном случае
//%G    %E для огромных экспонент, %F в противном случае
//%s: для вывода строки
//%p: для вывода значения указателя - адреса в шестнадцатеричном представлении (указатели мы пройдем на следующих уроках)
//%T для вывода типа переменной
//%f: точность и ширина значения по умолчанию
//%9f: ширина - 9 символов и точность по умолчанию
//(число с плавающей точкой будет занимать как минимум 9 позиций. Если ширина больше, чем требуется значению, то заполняется пробелами.)
//%.2f: ширина по умолчанию и точность - 2 символа
//%9.2f: ширина - 9 и точность - 2
//%9.f: ширина - 9 и точность - 0

func main() {
	var (
		number       float64
		strokeNumber string
	)

	fmt.Scan(&number)
	if number < 0 {
		fmt.Printf("число %2.2f не подходит", number)
	} else if number > 10000 {
		fmt.Printf("%E", number)
	} else {
		number = math.Pow(number, 2)
		strokeNumber = fmt.Sprintf("%.4f", number)
		fmt.Println(strokeNumber)
	}
}
